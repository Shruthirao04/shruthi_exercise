<?php

/**
 * @file
 * This file has different hooks.
 */
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\shruthi_exercise\Event\UserLoginEvent;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_form_alter().
 */
function shruthi_exercise_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Gets called whenever form is opened.
  // Calling service to call getName func from CustomService.php.
  $data = \Drupal::service('custom_service')->getName();
  // Prints the value provided in the config form.
  //print_r($data);
}

/**
 * Implements hook_theme().
 */
function shruthi_exercise_theme($existing, $type, $theme, $path) {

  return [
  // Name for the template file (html.twig)
    'shruthi_template' => [
  // Defined variables to be returned.
      'variables' => [
  // Can provide default value for markup here.
        'markup' => "",
  // Can prove default value for hexcode here.
        'hexcode' => "",
      ],
    ],
  ];

}

/**
 * Implements hook_user_login().
 */
function shruthi_exercise_user_login($account) {
  // Instantiate our event.
  $event = new UserLoginEvent($account);

  // Get the event_dispatcher service and dispatch the event.
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch($event, UserLoginEvent::EVENT_NAME);
}

/**
 * Implements hook_page_attachments_alter().
 */
function shruthi_exercise_page_attachments_alter(array &$attachments) {
  // Calling the service.
  $route_match = \Drupal::routeMatch();
  // Getting the route name of the particular page.
  $route_name = $route_match->getRouteName();
  // print_r($route_name);exit;
  // If the route name matches.
  if ($route_name === 'comment.admin') {
    // Apply the css.
    $attachments['#attached']['library'][] = 'shruthi_exercise/css_lib';
  }
  // If the route name matches.
  elseif ($route_name === 'entity.node.canonical') {
    // Apply the css.
    $attachments['#attached']['library'][] = 'shruthi_exercise/css_lib';
  }
  $attachments['#attached']['library'][] = 'shruthi_exercise/css_lib';
  $attachments['#attached']['drupalSettings']['shruthi_exercise']['color_body'] = "testing";
}
/**
 * Implements hook_help().
 */

use Drupal\Core\Routing\RouteMatchInterface;

function shruthi_exercise_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the custom_mail module.
    case 'help.page.custom_mail':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('How to send an email programmatically') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_mail().
 */
function shruthi_exercise_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    case 'create_article':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Page created: @title', ['@title' => $params['node_title']], $options);
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_entity_insert().
 */
function shruthi_exercise_entity_insert(EntityInterface $entity) {

  if ($entity->getEntityTypeId() !== 'node' || ($entity->getEntityTypeId() === 'node' && $entity->bundle() !== 'article')) {
    return;
  }

  $mailManager = \Drupal::service('plugin.manager.mail');

  $module = 'shruthi_exercise';
  $key = 'create_article';
  $to = \Drupal::currentUser()->getEmail();
  $params['message'] = $entity->get('body')->value;
  $params['node_title'] = $entity->label();
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = TRUE;

  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
  if ($result['result'] !== TRUE) {

    \Drupal::messenger()->addMessage(t('There was a problem sending your message and it was not sent'), 'error');
  }
  else {

    \Drupal::messenger()->addMessage(t('Your message has been sent.'), 'status');
  }

}

/**
 * Implements hook_entity_view_alter().
 */
function shruthi_exercise_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() == "node") {
    $build['field_text']['#title'] = "text title changed";
    unset($build['field_date']);
    $build['markup'] = [
      '#markup' => "<h3>Testing the hook</h3>",
    ];
  }

}

/**
 * Implements hook_entity_view().
 */
function shruthi_exercise_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Condition entity type = node.
  $session = \Drupal::request()->getSession();
  $counts = $session->get("shruthi_exercise.node_view_count", []);
  if (!isset($counts[$entity->id()])) {
    $counts[$entity->id()] = 1;
  }
  else {
    $counts[$entity->id()]++;
  }

  $session->set("shruthi_exercise.node_view_count", $counts);
  $build['count'] = [
    '#markup' => "Viewed " . $counts[$entity->id()] . " times",
    '#cache' => [
      'max-age' => 0,
    ],
  ];

}

/**
 * Implements hook_form_alter().
 */

 function custom_config_form_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    if ($form_id == "node_article_edit_form") {
      $helptext = \Drupal::configFactory()->getEditable("custom_config_form.settings")->get("tokenfield");
      $node = \Drupal::routeMatch()->getParameter("node"); //type: node object
      $token_service = \Drupal::token();
      $hlptxt = $token_service->replace($helptext, ['node'=>$node], ['clear'=>TRUE]);
      $form['#prefix'] = "<span>" . $hlptxt . "</span>";
    }
 }